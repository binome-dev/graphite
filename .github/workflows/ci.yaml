name: Python CI/CD

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"


concurrency:
  group: graphite-ci-pipeline
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

env:
  PYTHON_VERSION: "3.12"
jobs:
  
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      # ----------------------------------------------
      #       load cached venv if cache exists
      # ----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction #--no-root
      
      # - name: Install project
      #   run: poetry install --no-interaction

      - name: Check Python and Pytest
        run: |
          python --version
          which python
          poetry env info
          poetry run python -m pytest --version

      - name: Run Tests
        run: poetry run pytest tests/

  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
          role-to-assume: "arn:aws:iam::328524571810:role/gha_graphite_ci_ops"
          aws-region: "us-east-1"

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction #--no-root

    - name: Get Secrets = OPEN API KEY
      id: secrets
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          OPENAI_API_KEY, openai-api-key
          TAVILY_API_KEY, tavily-api-key

    - name: Run Integration Test ALL
      run: |
        poetry run python examples/run_all.py


  version:
    name: Get Package Version
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: 
      - unit-tests
      - integration-tests

    outputs:
      package-version: ${{ steps.package-version.outputs.VERSION }}
      remote-version: ${{ steps.remote-version.outputs.LATEST_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for tagging

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Get Package Version
        id: package-version
        run: |
          echo "VERSION=$(poetry version --short)" >> $GITHUB_OUTPUT

      - name: Remote Check PyPI Version
        id: remote-version
        run: |
          echo "LATEST_VERSION=$(pip index versions grafi 2>/dev/null | grep 'LATEST:' | awk '{print $2}')" >> $GITHUB_OUTPUT


  publish_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: version
    if: github.ref == 'refs/heads/main' && ( needs.version.outputs.package-version != needs.version.outputs.remote-version )


    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --without dev --no-interaction --no-root --sync
      
      - name: Install project
        run: |
           poetry install --without dev --no-interaction  --sync
           poetry build

      - name: mint API token
        id: mint-token
        run: |
          # retrieve the ambient OIDC token
          resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
          oidc_token=$(jq -r '.value' <<< "${resp}")

          # exchange the OIDC token for an API token
          resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
          api_token=$(jq -r '.token' <<< "${resp}")

          # mask the newly minted API token, so that we don't accidentally leak it
          echo "::add-mask::${api_token}"

          # see the next step in the workflow for an example of using this step output
          echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"
   

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    name: Github Release
    runs-on: ubuntu-latest
    needs: 
      - publish_pypi
      - version
      - integration-tests

    if: github.ref == 'refs/heads/main' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history f

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"


      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ needs.version.outputs.package-version }}
          body: Changelog Contents
          token: ${{ github.token }}
          tag: ${{ needs.version.outputs.package-version }}
          skipIfReleaseExists: true
